<head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0,minimum-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
</head>
<body>
    <div class="serch_box">
        <%# ハンバーガーメニュー %>
        <input id="hamburger_menu" type="checkbox" />
        <label for="hamburger_menu" class="open"><img class="hamburger_icon" src="/icon_svg/hamburger_icon.svg"></label>

        <%# ハンバーガーメニューの中身 %>
        <aside>
            <label for="hamburger_menu" class="close"><img class="hamburger_icon" src="/icon_svg/hamburger_close_icon.svg"></label>

            <nav class="hamburger_menu">
                <% if @current_user %>
                    <li>
                        <%= link_to( "マイページ", "/users/#{@current_user.id}") %>
                    </li>
                    <li>
                        <%= link_to( "ペットマップとは", "/maps/about") %>
                    </li>
                    <li>
                        <%= link_to( "提案,意見する", "/posts/index") %>
                    </li>
                    <li>
                        <%= link_to("ログアウト", "/logout", {method: :post})%>
                    </li>
                <% else %>
                    <li>
                        <%= link_to( "ログイン", "/login") %>
                    </li>
                    <li>
                        <%= link_to( "ペットマップとは", "/maps/about") %>
                    </li>
                <% end %>
            </nav>
        </aside>

        <%# 検索バー %>
        <input id="address" type="textbox" value="" placeholder="ここで検索してください">

        <%# buttonをクリックしたらSearchGoを実行 %>
        <input id="address_button" type="image"  src="/icon_svg/serch_icon.svg" onclick="SearchGo()">
    </div>
    <div id="maps_users" data-maps_users="<%= @users.to_json %>"></div> 

    <%# アイコンをクリックするとroute.function_nameを実行 %>
    <div class="search">
        <%# ユーザの認識 %>
        <% if @current_user %>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  src="<%= "/route_images/#{@route1.image_name}" %>" id="<%= @route1.function_name %>">
                </li>
                <li class="search_menu_text"><%= @route1.route_name %></li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  src="<%= "/route_images/#{@route2.image_name}" %>" id="<%= @route2.function_name %>">
                </li>
                <li class="search_menu_text"><%= @route2.route_name %></li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  src="<%= "/route_images/#{@route3.image_name}" %>" id="<%= @route3.function_name %>">
                </li>
                <li class="search_menu_text"><%= @route3.route_name %></li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/restaurant_remove.svg" onclick="R_removeMakers()">
                </li>
                <li class="search_menu_text">飲..の削除</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/hospital_remove.svg" onclick="H_removeMakers()">
                </li>
                <li class="search_menu_text">病院の削除</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/trimming_remove.svg" onclick="T_removeMakers()">
                </li>
                <li class="search_menu_text">ト..の削除</li>
            </div>
            <% if @current_user.name == "test" %>
                <div class="search_menu">
                    <li>
                        <input class="search_button" type="image" id="aaa" src="/icon_svg/trimming_remove.svg">
                    </li>
                    <li class="search_menu_text">登録店</li>
                </div>
            <% end %>
        <% else %>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image" id="Restaurant" src="/icon_svg/restaurant.svg">
                </li>
                <li class="search_menu_text">飲食店</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image" id="Hospital" src="/icon_svg/hospital.svg">
                </li>
                <li class="search_menu_text">病院</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image" id="Trimming" src="/icon_svg/trimming.svg">
                </li>
                <li class="search_menu_text">トリミング</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/restaurant_remove.svg" onclick="R_removeMakers()">
                </li>
                <li class="search_menu_text">飲..の削除</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/hospital_remove.svg" onclick="H_removeMakers()">
                </li>
                <li class="search_menu_text">病院の削除</li>
            </div>
            <div class="search_menu">
                <li>
                    <input class="search_button" type="image"  id="a" src="/icon_svg/trimming_remove.svg" onclick="T_removeMakers()">
                </li>
                <li class="search_menu_text">ト..の削除</li>
            </div>
        <% end %>
    </div>
    <div>
        <%= react_component('HowtoUse') %>
    </div>
    <div class="reset_position">
        <li>
            <input class="search_button" type="image"  src="/icon_svg/position.svg" onclick="initMap()">
        </li>
        <li class="search_menu_text">現在地</li>
    </div>

    <div class="gnavi">
        <a href="https://api.gnavi.co.jp/api/scope/" target="_blank">
        <img class="gnavi_img" src="https://api.gnavi.co.jp/api/img/credit/api_265_65.gif" width="265" height="65" border="0" alt="グルメ情報検索サイト ぐるなび">
        </a>
    </div>

    <div id="map" class="map">
    </div>



    <script>

    let map;
    let places;
    let marker;
    let restaurantMarkers = [];
    let hospitalMarkers = [];
    let hotelMakers = [];
    let trimmingMarkers = [];
    let type_date = [];
    let a = [];
    let addresses = [];

    const maps_usersHash = $('#maps_users').data('maps_users'); 

    let types = ["Restaurant", "Hospital", "Trimming"];
    let typeimages = [
        "/icon_svg/restaurant_marker.svg",
        "/icon_svg/hospital_marker.svg",
        "/icon_svg/trimming_marker.svg"
    ]

    //地図の生成
    function initMap(){       
        var initPos = new google.maps.LatLng(0,0);

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 13,
            center: initPos,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        });

        //現在地の取得
        let a = navigator.geolocation.getCurrentPosition(get_pos);
        function get_pos(position) {
            let lat = position.coords.latitude; // 緯度
            let lng = position.coords.longitude; // 経度
            let latLng = new google.maps.LatLng(lat, lng);
            var marker = new google.maps.Marker({ // 現在地の位置設定とアイコンのカスタマイズ
                position: latLng,
                map: map,
                icon: {
                    url: "/icon_svg/me_marker.svg",
                    scaledSize: new google.maps.Size(29.4, 40)
                }
            }); // 地図の中央に現在地を表示する
        }
        
        Hospitals();

        // 飲食店の検索
        const Restaurant = document.getElementById("Restaurant");
        Restaurant.addEventListener("click", function(){
            map.addListener(Restaurants());
        });

        // 動物病院の検索
        const Hospital = document.getElementById("Hospital");
        Hospital.addEventListener("click", function(){
            map.addListener(Hospitals());
            let geocoder = new google.maps.Geocoder();
            map.addListener(type_clicks(geocoder, map));
        });

        // 動物病院の検索
        const Trimming = document.getElementById("Trimming");
        Trimming.addEventListener("click", function(){
            map.addListener(Trimmings());
        });

        const aaaa = document.getElementById("aaa");
        aaaa.addEventListener("click", function(){
            let geocoder = new google.maps.Geocoder();
            type_clicks(geocoder, map);
        });

        map.panTo(map.getCenter());
    }

    function type_clicks(geocoder, resultsMap){
        for(var i = 0; i < maps_usersHash.length; i++){
            for(var j = 0; j < types.length; j++){
                if(maps_usersHash[i].marker_type == types[j]){
                    let name = maps_usersHash[i].name;
                    let opentime = maps_usersHash[i].open_time; 
                    let closetime = maps_usersHash[i].close_time; 
                    let markeraddress = maps_usersHash[i].address; 
                    let phonenumber = maps_usersHash[i].phone_number; 
                    let url = maps_usersHash[i].url; 
                    let feature = maps_usersHash[i].feature; 
                    let image = typeimages[j];
                    geocoder.geocode({ address: maps_usersHash[i].address}, (results, status) => {
                        for(var k = 0; k < results.length; k++){
                            if (status === "OK") {
                                console.log(map.getCenter());
                                resultsMap.setCenter(results[k].geometry.location);
                                marker = createMarker({
                                map: map,
                                text : name + "<br>" +
                                        opentime + "~" + closetime + "<br>" +
                                        markeraddress + "<br>" +
                                        phonenumber + "<br>" +
                                        url + "<br>" +
                                        feature,
                                icon: {
                                    url: image,
                                    scaledSize: new google.maps.Size(32, 45)
                                },
                                position: results[k].geometry.location
                                });
                                hospitalMarkers.push(marker);
                            } else {
                            alert("Geocode was not successful for the following reason: " + status);
                            }
                        }
                    });
                }
            }
        }
    }

    function Restaurants(){

        //現在地の取得
        let a = navigator.geolocation.getCurrentPosition(get_pos);
        function get_pos(position) {
            let latlngs = map.getCenter();
            let lat = latlngs.lat(); // 緯度
            let lng = latlngs.lng(); // 経度
            $.ajax({
                type : "get",
                url : "https://api.gnavi.co.jp/RestSearchAPI/v3/?keyid=ff6b15a9e19b5a50c29261914d61ec7e&with_pet=1&latitude="+
                        lat+"&longitude="+lng+"&range=5&category_l=RSFST20000,RSFST18000",  // ぐるなびの情報を取得
                dataType : 'json',
                success : function(json){
                    let num_shop = json.rest.length;
                    for( let i=0; i < num_shop; i++){
                    var latLng = new google.maps.LatLng(json.rest[i].latitude, json.rest[i].longitude); // 検索情報の経緯度
                    marker = new google.maps.Marker({
                        position: latLng,
                        map: map,
                        icon: {
                            url: "/icon/restaurant_marker.png",
                            scaledSize: new google.maps.Size(32, 45)
                        },
                        url: json.rest[i].url,
                    });
                    restaurantMarkers.push(marker);
                    google.maps.event.addListener(marker, 'click', (function(url){
                        return function(){ location.href = url; };
                    })(json.rest[i].url));
                    }
                },
                error: function(json){
                    console.log("error")
                }
            }
            );
        }
    }
        
        // 入力キーワードと表示範囲を設定
        function SearchGo() {
            var latLng = new google.maps.LatLng(0,0);
            var mapOptions = {
                center : latLng,
                zoom: 5,
                mapTypeId : google.maps.MapTypeId.ROADMAP
            };
            // #map_canva要素にMapクラスの新しいインスタンスを作成
            map = new google.maps.Map(document.getElementById("map"), mapOptions);
            service = new google.maps.places.PlacesService(map);
            // input要素に入力されたキーワードを検索の条件に設定
            var myword = document.getElementById("address");
            var request = {
                query : myword.value,
                radius : 10000,
                location : map.getCenter()
            };
            service.textSearch(request, result_search);
        }

        // 動物病院を検索
        function Hospitals() {
            service = new google.maps.places.PlacesService(map);
            var request = {
                query : "動物病院",
                radius : 10000,
                location : map.getCenter()
            };
            service.textSearch(request, hospital_result_search);
        }



        // Hospitalの検索の結果を受け取る
        function hospital_result_search(results, status) {
            var bounds = new google.maps.LatLngBounds();
            for(var i = 0; i < results.length; i++){
                    marker = createMarker({
                    position : results[i].geometry.location,
                    text : results[i].name + "<br>" +
                            results[i].formatted_address,
                    map : map,
                    icon: {
                        url: "/icon_svg/hospital_marker.svg",
                        scaledSize: new google.maps.Size(32, 45)
                    }
                    });
                    hospitalMarkers.push(marker);
                    bounds.extend(results[i].geometry.location);
            }
            map.fitBounds(bounds);

        }

        //トリミングを検索
        function Trimmings() {
            service = new google.maps.places.PlacesService(map);
            var request = {
                query : "トリミング",
                radius : 10000,
                location : map.getCenter()
            };
            service.textSearch(request, trimming_result_search);
        }

        // Hospitalの検索の結果を受け取る
        function trimming_result_search(results, status) {
            var bounds = new google.maps.LatLngBounds();
            for(var i = 0; i < results.length; i++){
                marker = createMarker({
                    position : results[i].geometry.location,
                    text : results[i].name + "<br>" +
                            results[i].formatted_address,
                    map : map,
                    icon: {
                        url: "/icon_svg/trimming_marker.svg",
                        scaledSize: new google.maps.Size(32, 45)
                    }
                });
                trimmingMarkers.push(marker);
                bounds.extend(results[i].geometry.location);
            }
            map.fitBounds(bounds);
        }
        
        // 検索の結果を受け取る
        function result_search(results, status) {
            var bounds = new google.maps.LatLngBounds();
            for(var i = 0; i < results.length; i++){
                createMarker({
                    position : results[i].geometry.location,
                    text : results[i].name + "<br>" +
                            results[i].formatted_address,
                    map : map
                });
                bounds.extend(results[i].geometry.location);
            }
            map.fitBounds(bounds);
        }

        function R_removeMakers(idx=null) {
            if(idx == null){
                //生成済マーカーを順次すべて削除する
                for (var i = 0; i < restaurantMarkers.length; i++) {
                        restaurantMarkers[i].setMap(null);
                }
                restaurantMarkers = [];	//参照を開放
            }else{
                //生成済マーカーからID指定されたマーカーを削除
                for (var i = 0; i < restaurantMarkers.length; i++) {
                    if(idx.indexOf(i) >= 0){
                        restaurantMarkers[i].setMap(null);
                    }
                }
            }
        }

        function H_removeMakers(idx=null) {
            if(idx == null){
                //生成済マーカーを順次すべて削除する
                for (var i = 0; i < hospitalMarkers.length; i++) {
                        hospitalMarkers[i].setMap(null);
                }
                hospitalMarkers = [];	//参照を開放
            }else{
                //生成済マーカーからID指定されたマーカーを削除
                for (var i = 0; i < hospitalMarkers.length; i++) {
                    if(idx.indexOf(i) >= 0){
                        hospitalMarkers[i].setMap(null);
                    }
                }
            }
        }

        function T_removeMakers(idx=null) {
            if(idx == null){
                //生成済マーカーを順次すべて削除する
                for (var i = 0; i < trimmingMarkers.length; i++) {
                        trimmingMarkers[i].setMap(null);
                }
                trimmingMarkers = [];	//参照を開放
            }else{
                //生成済マーカーからID指定されたマーカーを削除
                for (var i = 0; i < trimmingMarkers.length; i++) {
                    if(idx.indexOf(i) >= 0){
                        trimmingMarkers[i].setMap(null);
                    }
                }
            }
        }

        function mapCenter(){
            centerLatlng = map.getCnter();

            return centerLatlng;
        }
        
        // 該当する位置にマーカーを表示
        function createMarker(options) {
            // マップ情報を保持しているmapオブジェクトを指定
            options.map = map;
            // Markerクラスのオブジェクトmarkerを作成
            var marker = new google.maps.Marker(options);
            // 各施設の吹き出し(情報ウインドウ)に表示させる処理
            var infoWnd = new google.maps.InfoWindow();
            infoWnd.setContent(options.text);
            // addListenerメソッドを使ってイベントリスナーを登録
            google.maps.event.addListener(marker, 'click', function(){
                infoWnd.open(map, marker);
            });
            return marker;
        }
        
        // ページ読み込み完了後、Googleマップを表示
        google.maps.event.addDomListener(window, 'load', initMap);
    </script>
    <%# Googlemap APIの取得 %>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB87mkMD4fPhUltHTMmsdkUYzzyL0WoOtI&callback=initMap&libraries=places" async defer></script>
    
</body>
